local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Player = game:GetService("Players").LocalPlayer

local Window = Rayfield:CreateWindow({
   Name = "Brookhaven TEST",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Rayfield Interface Suite",
   LoadingSubtitle = "by Sirius",
   ShowText = "Rayfield", -- for mobile users to unhide rayfield, change if you'd like
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   ToggleUIKeybind = "K", -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local Tab = Window:CreateTab("LocalPlayer", 4483362458) -- Title, Image
local WalkSpeedSlider = Tab:CreateSlider({
   Name = "Walkspeed",
   Range = {0, 500},
   Increment = 1,
   Suffix = "",
   CurrentValue = 16,
   Flag = "WalkSpeedSlider", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      Player.Character.Humanoid.WalkSpeed = Value
   end,
})
local Respawn = Tab:CreateButton({
   Name = "Respawn",
   Callback = function()
        Player.Character.Humanoid.Health = 0
   end,
})

local Brookhaven = Window:CreateTab("Brookhaven", 4483362458)
local CarSpeed = Brookhaven:CreateButton({
   Name = "Make Car Fast",
   Callback = function()
   -- start
      local carName = Player.Name .. "Car"
      local carUuid = workspace.Vehicles:WaitForChild(carName):GetAttribute("VehicleUuid")
      if carUuid ~= nil then
         local args = {
	         carUuid,
	         {
		         Lights = {
	      	   	lightsOn = false,
		         	hazardsActive = false
		         },
		         IsLocked = false,
		         Appearance = {
		         	IsSmoking = false,
		         	WheelDecal = "http://www.roblox.com/asset/?id=0",
		          	BabyCarSeatInstalledNumber = 0,
		         	Color = Color3.new(0.3294117748737335, 0.5921568870544434, 1),
		         	IsOnFire = false,
		         	SuspensionHeight = 2
		         },
		         Performance = {
		         	DriftStrength = 1.5,
		         	MaxSpeed = math.huge,
		         	Turbo = 3
		         },
		         Owner = Player.Name
   	      }
         }
	      game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("ApplyStateToVehicle"):InvokeServer(unpack(args))
      else
         Rayfield:Notify({
            Title = "Error!",
            Content = "Does not work on this car, try a different one!",
            Duration = 6.5,
            Image = 0,
         })
   -- end
   end,
})

