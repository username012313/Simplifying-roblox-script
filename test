local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Player = game:GetService("Players").LocalPlayer
local VehicleFolder = workspace.Vehicles
local MyCarPath = nil
local function findPlayerVehicle()
   MyCarPath = VehicleFolder:WaitForChild(Player.Name)
end
findPlayerVehicle()
local Window = Rayfield:CreateWindow({
   Name = "universsal suspensions / udc",
   Icon = 0,
   LoadingTitle = "Rayfield Interface Suite",
   LoadingSubtitle = "by Sirius  // Version 0.0001a",
   ShowText = "Rayfield",
   Theme = "Default", 
    ToggleUIKeybind = "K", 
   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, 
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil,
      FileName = nil
   },
   Discord = {
      Enabled = false, 
      Invite = "noinvitelink",
      RememberJoins = true
   },
   KeySystem = false, 
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "Key", 
      SaveKey = true, 
      GrabKeyFromSite = false, 
      Key = {"Hello"} 
   }
})
local LocalPlayr = Window:CreateTab("LocalPlayer", 4483362458) -- Title, Image
local WalkSpeedSlider = LocalPlayr:CreateSlider({
   Name = "Walkspeed",
   Range = {0, 500},
   Increment = 1,
   Suffix = "",
   CurrentValue = 16,
   Flag = "WalkSpeedSlider", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        while true do
            Player.Character.Humanoid.WalkSpeed = Value
            task.wait(0.1)
            end
   end,
})
local JumpPowerSlider = LocalPlayr:CreateSlider({
   Name = "Jump Power",
   Range = {0, 1000},
   Increment = 1,
   Suffix = "",
   CurrentValue = 16,
   Flag = "JumpPowerSlider", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      Player.Character.Humanoid.JumpPower = Value*5
      
   end,
})
local Respawn = LocalPlayr:CreateButton({
   Name = "Respawn",
   Callback = function()
        Player.Character.Humanoid.Health = 0
   end,
})
local Tab = Window:CreateTab("ERLC", "car")
local Label = Tab:CreateLabel("Detect Car First!", "circle-alert", Color3.fromRGB(255, 255, 255), true)
local DetectButton = Tab:CreateButton({
   Name = "Detect Car",
   Callback = function()
      findPlayerVehicle()
    Label:Set("The car found is: "..MyCarPath.Name..", in ".."workspace."..VehicleFolder.Name.."."..MyCarPath.Name, "info", Color3.fromRGB(255, 255, 255), false)
   end,
})
local LengthSlider = Tab:CreateSlider({
   Name = "Change Length / rough",
   Range = {-0.1, 50},
   Increment = 0.05,
   Suffix = "",
   CurrentValue = 2.2,
   Flag = "Slider1", 
   Callback = function(Value)
        MyCarPath.Wheels.FL.SuspensionGeometry.Spring.MaxLength = Value
        MyCarPath.Wheels.FR.SuspensionGeometry.Spring.MaxLength = Value
        MyCarPath.Wheels.RL.SuspensionGeometry.Spring.MaxLength = Value
        MyCarPath.Wheels.RR.SuspensionGeometry.Spring.MaxLength = Value
        MyCarPath.Wheels.FL.SuspensionGeometry.Spring.MinLength = Value
        MyCarPath.Wheels.FR.SuspensionGeometry.Spring.MinLength = Value
        MyCarPath.Wheels.RL.SuspensionGeometry.Spring.MinLength = Value
        MyCarPath.Wheels.RR.SuspensionGeometry.Spring.MinLength = Value
        
   end,
})
local SpeedSlider = Tab:CreateSlider({
   Name = "Speed",
   Range = {0, 20000},
   Increment = 0.05,
   Suffix = "",
   CurrentValue = 2.2,
   Flag = "Slider1", 
   Callback = function(Value)
        MyCarPath.Wheels.FL:FindFirstChild("#AV").MotorMaxTorque = Value
        MyCarPath.Wheels.FR:FindFirstChild("#AV").MotorMaxTorque = Value
        MyCarPath.Wheels.RL:FindFirstChild("#AV").MotorMaxTorque = Value
        MyCarPath.Wheels.RR:FindFirstChild("#AV").MotorMaxTorque = Value
        MyCarPath.Wheels.FL:FindFirstChild("#AV").AngularVelocity = Value
        MyCarPath.Wheels.FR:FindFirstChild("#AV").AngularVelocity = Value
        MyCarPath.Wheels.RL:FindFirstChild("#AV").AngularVelocity = Value
        MyCarPath.Wheels.RR:FindFirstChild("#AV").AngularVelocity = Value
   end,
})
local FineLengthSlider = Tab:CreateSlider({
   Name = "Change Length / fine",
   Range = {1, 3},
   Increment = 0.05,
   Suffix = "",
   CurrentValue = 2.2,
   Flag = "Slider1", 
   Callback = function(Value)
        MyCarPath.Wheels.FL.SuspensionGeometry.Spring.MaxLength = Value
        MyCarPath.Wheels.FR.SuspensionGeometry.Spring.MaxLength = Value
        MyCarPath.Wheels.RL.SuspensionGeometry.Spring.MaxLength = Value
        MyCarPath.Wheels.RR.SuspensionGeometry.Spring.MaxLength = Value
        MyCarPath.Wheels.FL.SuspensionGeometry.Spring.MinLength = Value
        MyCarPath.Wheels.FR.SuspensionGeometry.Spring.MinLength = Value
        MyCarPath.Wheels.RL.SuspensionGeometry.Spring.MinLength = Value
        MyCarPath.Wheels.RR.SuspensionGeometry.Spring.MinLength = Value
        
   end,
})
local FineLengthSlider = Tab:CreateSlider({
   Name = "Change Length / fine",
   Range = {0, math.huge},
   Increment = 0.05,
   Suffix = "",
   CurrentValue = 2.2,
   Flag = "Slider1", 
   Callback = function(Value)
        MyCarPath.Wheels.FL.SuspensionGeometry.Spring.MaxForce = Value
        MyCarPath.Wheels.FR.SuspensionGeometry.Spring.MaxForce = Value
        MyCarPath.Wheels.RL.SuspensionGeometry.Spring.MaxForce = Value
        MyCarPath.Wheels.RR.SuspensionGeometry.Spring.MaxForce = Value
   end,
})
local VisibilityToggle = Tab:CreateToggle({
   Name = "Make Springs visible (clientside)",
   CurrentValue = false,
   Flag = "Toggle1", 
   Callback = function(Value)
            MyCarPath.Wheels.FL.SuspensionGeometry.Spring.Visible = Value
            MyCarPath.Wheels.FR.SuspensionGeometry.Spring.Visible = Value
            MyCarPath.Wheels.RL.SuspensionGeometry.Spring.Visible = Value
            MyCarPath.Wheels.RR.SuspensionGeometry.Spring.Visible = Value
   end,
})
local StiffnessSlider = Tab:CreateSlider({
   Name = "Stiffness",
   Range = {0, 100},
   Increment = 0.1,
   Suffix = "",
   CurrentValue = 1,
   Flag = "Slider2", 
   Callback = function(Value)
   	  MyCarPath.Wheels.FL.SuspensionGeometry.Spring.Stiffness = Value
        MyCarPath.Wheels.FR.SuspensionGeometry.Spring.Stiffness = Value
        MyCarPath.Wheels.RL.SuspensionGeometry.Spring.Stiffness = Value
        MyCarPath.Wheels.RR.SuspensionGeometry.Spring.Stiffness = Value
   end,
})
local DampingSlider = Tab:CreateSlider({
   Name = "Damping Slider",
   Range = {0, 2500},
   Increment = 5,
   Suffix = "",
   CurrentValue = 10,
   Flag = "Slider3",
   Callback = function(Value)
        MyCarPath.Wheels.FL.SuspensionGeometry.Spring.Damping = Value
        MyCarPath.Wheels.FR.SuspensionGeometry.Spring.Damping = Value
        MyCarPath.Wheels.RL.SuspensionGeometry.Spring.Damping = Value
        MyCarPath.Wheels.RR.SuspensionGeometry.Spring.Damping = Value
   end,
})
local Limiter = Tab:CreateToggle({
   Name = "Disable/Enable Spring Limits",
   CurrentValue = false,
   Flag = "Toggle1", 
   Callback = function(Value)
        MyCarPath.Wheels.FL.SuspensionGeometry.Spring.LimitsEnabled = Value
        MyCarPath.Wheels.FR.SuspensionGeometry.Spring.LimitsEnabled = Value
        MyCarPath.Wheels.RL.SuspensionGeometry.Spring.LimitsEnabled = Value
        MyCarPath.Wheels.RR.SuspensionGeometry.Spring.LimitsEnabled = Value
   end,
})
local Tab2 = Window:CreateTab("rear and front idk", "car")
local LengthFSlider = Tab2:CreateSlider({
   Name = "Change Length Front",
   Range = {-0.5, 5},
   Increment = 0.05,
   Suffix = "",
   CurrentValue = 2.2,
   Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        MyCarPath.Wheels.FL.SuspensionGeometry.Spring.MaxLength = Value
        MyCarPath.Wheels.FR.SuspensionGeometry.Spring.MaxLength = Value
        MyCarPath.Wheels.FL.SuspensionGeometry.Spring.MinLength = Value
        MyCarPath.Wheels.FR.SuspensionGeometry.Spring.MinLength = Value        
   end,
})
local LengthRSlider = Tab2:CreateSlider({
   Name = "Change Length Front",
   Range = {-0.5, 5},
   Increment = 0.05,
   Suffix = "",
   CurrentValue = 2.2,
   Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        MyCarPath.Wheels.RL.SuspensionGeometry.Spring.MaxLength = Value
        MyCarPath.Wheels.RR.SuspensionGeometry.Spring.MaxLength = Value
        MyCarPath.Wheels.RL.SuspensionGeometry.Spring.MinLength = Value
        MyCarPath.Wheels.RR.SuspensionGeometry.Spring.MinLength = Value        
   end,
})
local misc = Window:CreateTab("misc", "box") -- Title, Image
local LoadIY = misc:CreateButton({
   Name = "Execute Infinite yield",
   Callback = function()
      loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()
   end,
})
local KickLocalPlayer = misc:CreateButton({
   Name = "Kick Yourself",
   Callback = function()
      Player:Kick("Kicked yourself")
   end,
})
