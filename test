local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Player = game:GetService("Players").LocalPlayer
local VehicleFolder = workspace.Vehicles
local MyCarPath = nil
local function findPlayerVehicle()
    for _, vehicle in ipairs(VehicleFolder:GetChildren()) do
        local VehicleConfig = vehicle:FindFirstChild("VehicleConfig") --change this if your game is different
        local owner = VehicleConfig and VehicleConfig:FindFirstChild("OwnerUserID") -- same here
        if owner and owner:IsA("NumberValue") and owner.Value == Player.UserId then --and here
            MyCarPath = vehicle
            print("The car found is:",MyCarPath,", in","workspace."..VehicleFolder.Name.."."..MyCarPath.Name)
        end
    end
end
findPlayerVehicle()
local Window = Rayfield:CreateWindow({
   Name = "universsal suspensions / udc",
   Icon = "car",
   LoadingTitle = "Rayfield Interface Suite",
   LoadingSubtitle = "by Sirius  // Version 0.0001a",
   ShowText = "Rayfield",
   Theme = "Default", 
    ToggleUIKeybind = "K", 
   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, 
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil,
      FileName = "erlc"
   },
   Discord = {
      Enabled = false, 
      Invite = "noinvitelink",
      RememberJoins = true
   },
   KeySystem = false, 
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "Key", 
      SaveKey = true, 
      GrabKeyFromSite = false, 
      Key = {"Hello"} 
   }
})
local Tab = Window:CreateTab("ERLC", car)
local Label = Tab:CreateLabel("Spawn car first!", "circle-alert", Color3.fromRGB(255, 255, 255), true)

local DetectButton = Tab:CreateButton({
   Name = "Detect Car",
   Callback = function()
      findPlayerVehicle()
    Label:Set("The car found is: "..MyCarPath.Name..", in ""workspace."..VehicleFolder.Name.."."..MyCarPath.Name, "info", Color3.fromRGB(255, 255, 255), false) 
   end,
})
local LengthSlider = Tab:CreateSlider({
   Name = "Change Length / rough",
   Range = {-0.1, 50},
   Increment = 0.05,
   Suffix = "",
   CurrentValue = 2.2,
   Flag = "Slider1", 
   Callback = function(Value)
        MyCarPath.Wheels.FL.Spring.MaxLength = Value
        MyCarPath.Wheels.FR.Spring.MaxLength = Value
        MyCarPath.Wheels.RL.Spring.MaxLength = Value
        MyCarPath.Wheels.RR.Spring.MaxLength = Value
        MyCarPath.Wheels.FL.Spring.MinLength = Value
        MyCarPath.Wheels.FR.Spring.MinLength = Value
        MyCarPath.Wheels.RL.Spring.MinLength = Value
        MyCarPath.Wheels.RR.Spring.MinLength = Value
        
   end,
})
local FineLengthSlider = Tab:CreateSlider({
   Name = "Change Length / fine",
   Range = {1, 3},
   Increment = 0.05,
   Suffix = "",
   CurrentValue = 2.2,
   Flag = "Slider1", 
   Callback = function(Value)
        MyCarPath.Wheels.FL.Spring.MaxLength = Value
        MyCarPath.Wheels.FR.Spring.MaxLength = Value
        MyCarPath.Wheels.RL.Spring.MaxLength = Value
        MyCarPath.Wheels.RR.Spring.MaxLength = Value
        MyCarPath.Wheels.FL.Spring.MinLength = Value
        MyCarPath.Wheels.FR.Spring.MinLength = Value
        MyCarPath.Wheels.RL.Spring.MinLength = Value
        MyCarPath.Wheels.RR.Spring.MinLength = Value
        
   end,
})
local VisibilityToggle = Tab:CreateToggle({
   Name = "Make Springs visible (clientside)",
   CurrentValue = false,
   Flag = "Toggle1", 
   Callback = function(Value)
            MyCarPath.Wheels.FL.Spring.Visible = Value
            MyCarPath.Wheels.FR.Spring.Visible = Value
            MyCarPath.Wheels.RL.Spring.Visible = Value
            MyCarPath.Wheels.RR.Spring.Visible = Value
   end,
})
local BugToggle = Tab:CreateToggle({
   Name = "Make tires not bug out",
   CurrentValue = false,
   Flag = "Toggle1",
   Callback = function(Value)
            MyCarPath.Wheels.FL:WaitForChild("#SB").SuspensionHinge.LimitsEnabled = Value
            MyCarPath.Wheels.FR:WaitForChild("#SB").SuspensionHinge.LimitsEnabled = Value
            MyCarPath.Wheels.RL:WaitForChild("#SB").SuspensionHinge.LimitsEnabled = Value
            MyCarPath.Wheels.RR:WaitForChild("#SB").SuspensionHinge.LimitsEnabled = Value
   end,
})
local StiffnessSlider = Tab:CreateSlider({
   Name = "Stiffness",
   Range = {0, 100},
   Increment = 0.1,
   Suffix = "",
   CurrentValue = 1,
   Flag = "Slider2", 
   Callback = function(Value)
   	    MyCarPath.Wheels.FL.Spring.Stiffness = Value
        MyCarPath.Wheels.FR.Spring.Stiffness = Value
        MyCarPath.Wheels.RL.Spring.Stiffness = Value
        MyCarPath.Wheels.RR.Spring.Stiffness = Value
   end,
})
local DampingSlider = Tab:CreateSlider({
   Name = "Damping Slider",
   Range = {0, 2500},
   Increment = 5,
   Suffix = "",
   CurrentValue = 10,
   Flag = "Slider3",
   Callback = function(Value)
        MyCarPath.Wheels.FL.Spring.Damping = Value
        MyCarPath.Wheels.FR.Spring.Damping = Value
        MyCarPath.Wheels.RL.Spring.Damping = Value
        MyCarPath.Wheels.RR.Spring.Damping = Value
   end,
})
local Limiter = Tab:CreateToggle({
   Name = "Disable/Enable Spring Limits",
   CurrentValue = false,
   Flag = "Toggle1", 
   Callback = function(Value)
        MyCarPath.Wheels.FL.Spring.LimitsEnabled = Value
        MyCarPath.Wheels.FR.Spring.LimitsEnabled = Value
        MyCarPath.Wheels.RL.Spring.LimitsEnabled = Value
        MyCarPath.Wheels.RR.Spring.LimitsEnabled = Value
   end,
})
local Tab1 = Window:CreateTab("Change Springs individualy", "car") 
local Slider1 = Tab1:CreateSlider({
   Name = "Change Length FL / MaxLength",
   Range = {-0.1, 50},
   Increment = 0.05,
   Suffix = "",
   CurrentValue = 2.2,
   Flag = "Slider1",
   Callback = function(Value)
        MyCarPath.Wheels.FL.Spring.MaxLength = Value
        
   end,
})
local Slider2= Tab1:CreateSlider({
   Name = "Change Length FR / MaxLength",
   Range = {-0.1, 50},
   Increment = 0.05,
   Suffix = "",
   CurrentValue = 2.2,
   Flag = "Slider11",
   Callback = function(Value)
        MyCarPath.Wheels.FR.Spring.MaxLength = Value
        
   end,
})
local Slider3 = Tab1:CreateSlider({
   Name = "Change Length RL / MaxLength",
   Range = {-0.1, 50},
   Increment = 0.05,
   Suffix = "",
   CurrentValue = 2.2,
   Flag = "Slider12", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        MyCarPath.Wheels.RL.Spring.MaxLength = Value
        
   end,
})
local Slider4 = Tab1:CreateSlider({
   Name = "Change Length RR / MaxLength",
   Range = {-0.1, 50},
   Increment = 0.05,
   Suffix = "",
   CurrentValue = 2.2,
   Flag = "Slider13", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        MyCarPath.Wheels.RR.Spring.MaxLength = Value
        
   end,
})
local Slider5 = Tab1:CreateSlider({
   Name = "Change Length FL / MinLength",
   Range = {-0.1, 50},
   Increment = 0.05,
   Suffix = "",
   CurrentValue = 2.2,
   Flag = "Slider10", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        MyCarPath.Wheels.FL.Spring.MinLength = Value
        
   end,
})
local Slider = Tab1:CreateSlider({
   Name = "Change Length FR / MinLength",
   Range = {-0.1, 50},
   Increment = 0.05,
   Suffix = "",
   CurrentValue = 2.2,
   Flag = "Slider10", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        MyCarPath.Wheels.FR.Spring.MinLength = Value
        
   end,
})
local Slider = Tab1:CreateSlider({
   Name = "Change Length RL / MinLength",
   Range = {-0.1, 50},
   Increment = 0.05,
   Suffix = "",
   CurrentValue = 2.2,
   Flag = "Slider11", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        MyCarPath.Wheels.RL.Spring.MinLength = Value
        
   end,
})
local Slider = Tab1:CreateSlider({
   Name = "Change Length RR / MinLength",
   Range = {-0.1, 50},
   Increment = 0.05,
   Suffix = "",
   CurrentValue = 2.2,
   Flag = "Slider11", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        MyCarPath.Wheels.RR.Spring.MinLength = Value
        
   end,
})
local Tab2 = Window:CreateTab("rear and front idk", "car")
local LengthFSlider = Tab2:CreateSlider({
   Name = "Change Length Front",
   Range = {-0.5, 5},
   Increment = 0.05,
   Suffix = "",
   CurrentValue = 2.2,
   Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        MyCarPath.Wheels.FL.Spring.MaxLength = Value
        MyCarPath.Wheels.FR.Spring.MaxLength = Value
        MyCarPath.Wheels.FL.Spring.MinLength = Value
        MyCarPath.Wheels.FR.Spring.MinLength = Value        
   end,
})
local LengthRSlider = Tab2:CreateSlider({
   Name = "Change Length Front",
   Range = {-0.5, 5},
   Increment = 0.05,
   Suffix = "",
   CurrentValue = 2.2,
   Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        MyCarPath.Wheels.RL.Spring.MaxLength = Value
        MyCarPath.Wheels.RR.Spring.MaxLength = Value
        MyCarPath.Wheels.RL.Spring.MinLength = Value
        MyCarPath.Wheels.RR.Spring.MinLength = Value        
   end,
})
