local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Player = game:GetService("Players").LocalPlayer
local VehicleFolder = workspace.Vehicles
local MyCarPathFL = nil
local MyCarPathFR = nil
local MyCarPathRL = nil
local MyCarPathRR = nil  
local Window = Rayfield:CreateWindow({
   Name = "erlc suspensions / udc",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Rayfield Interface Suite",
   LoadingSubtitle = "by Sirius  // Version 0.0001a",
   ShowText = "Rayfield", -- for mobile users to unhide rayfield, change if you'd like
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   ToggleUIKeybind = "K", -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "erlc"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
}) -- START SPRING INPUT PATH
local SSetter = Window:CreateTab("Set Path", 4483362458) -- Title, Image
local Input = SSetter:CreateInput({
   Name = "Set Spring FL Path",
   CurrentValue = "",
   PlaceholderText = "workspace.Vehicles.Car.Wheels.FL.Spring",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(Text)
        MyCarPathFL = Text
   end,
})
local Input = SSetter:CreateInput({
   Name = "Set Spring FR Path",
   CurrentValue = "",
   PlaceholderText = "workspace.Vehicles.Car.Wheels.FR.Spring",
   RemoveTextAfterFocusLost = false,
   Flag = "Input2",
   Callback = function(Text)
        MyCarPathFR = Text
   end,
})
local Input = SSetter:CreateInput({
   Name = "Set Spring RL Path",
   CurrentValue = "",
   PlaceholderText = "workspace.Vehicles.Car.Wheels.RL.Spring",
   RemoveTextAfterFocusLost = false,
   Flag = "Input3",
   Callback = function(Text)
        MyCarPathRL = Text
   end,
})
local Input = SSetter:CreateInput({
   Name = "Set Spring RR Path",
   CurrentValue = "",
   PlaceholderText = "workspace.Vehicles.Car.Wheels.RR.Spring",
   RemoveTextAfterFocusLost = false,
   Flag = "Input4",
   Callback = function(Text)
        MyCarPathRR = Text
   end,
})  -- END SPRING INPUT PATH
local Tab = Window:CreateTab("ERLC", 4483362458) -- Title, Image
local LengthSlider = Tab:CreateSlider({
   Name = "Change Length / rough",
   Range = {-0.1, 50},
   Increment = 0.05,
   Suffix = "",
   CurrentValue = 2.2,
   Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        MyCarPathFL.MaxLength = Value
        MyCarPathFR.MaxLength = Value
        MyCarPathRL.MaxLength = Value
        MyCarPathRR.MaxLength = Value
        MyCarPathFL.MinLength = Value
        MyCarPathFR.MinLength = Value
        MyCarPathRL.MinLength = Value
        MyCarPathRR.MinLength = Value
        
   end,
})
local FineLengthSlider = Tab:CreateSlider({
   Name = "Change Length / fine",
   Range = {1, 3},
   Increment = 0.05,
   Suffix = "",
   CurrentValue = 2.2,
   Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        MyCarPathFL.MaxLength = Value
        MyCarPathFR.MaxLength = Value
        MyCarPathRL.MaxLength = Value
        MyCarPathRR.MaxLength = Value
        MyCarPathFL.MinLength = Value
        MyCarPathFR.MinLength = Value
        MyCarPathRL.MinLength = Value
        MyCarPathRR.MinLength = Value
        
   end,
})
local VisibilityToggle = Tab:CreateToggle({
   Name = "Make Springs visible (clientside)",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
            MyCarPathFL.Visible = Value
            MyCarPathFR.Visible = Value
            MyCarPathRL.Visible = Value
            MyCarPathRR.Visible = Value
   end,
})
local StiffnessSlider = Tab:CreateSlider({
   Name = "Stiffness",
   Range = {0, 100},
   Increment = 0.1,
   Suffix = "",
   CurrentValue = 1,
   Flag = "Slider2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   	    MyCarPathFL.Stiffness = Value
        MyCarPathFR.Stiffness = Value
        MyCarPathRL.Stiffness = Value
        MyCarPathRR.Stiffness = Value
   end,
})
local DampingSlider = Tab:CreateSlider({
   Name = "Damping Slider",
   Range = {0, 2500},
   Increment = 5,
   Suffix = "",
   CurrentValue = 10,
   Flag = "Slider3", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        MyCarPathFL.Damping = Value
        MyCarPathFR.Damping = Value
        MyCarPathRL.Damping = Value
        MyCarPathRR.Damping = Value
   end,
})
local Limiter = Tab:CreateToggle({
   Name = "Disable/Enable Spring Limits",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        MyCarPathFL.LimitsEnabled = Value
        MyCarPathFR.LimitsEnabled = Value
        MyCarPathRL.LimitsEnabled = Value
        MyCarPathRR.LimitsEnabled = Value
   end,
})
local Tab1 = Window:CreateTab("Change Springs individualy", 4483362458) -- Title, Image
local Slider1 = Tab1:CreateSlider({
   Name = "Change Length FL / MaxLength",
   Range = {-0.1, 50},
   Increment = 0.05,
   Suffix = "",
   CurrentValue = 2.2,
   Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        MyCarPath.Wheels.FL.Spring.MaxLength = Value
        
   end,
})
local Slider2= Tab1:CreateSlider({
   Name = "Change Length FR / MaxLength",
   Range = {-0.1, 50},
   Increment = 0.05,
   Suffix = "",
   CurrentValue = 2.2,
   Flag = "Slider11", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        MyCarPath.MaxLength = Value
        
   end,
})
local Slider3 = Tab1:CreateSlider({
   Name = "Change Length RL / MaxLength",
   Range = {-0.1, 50},
   Increment = 0.05,
   Suffix = "",
   CurrentValue = 2.2,
   Flag = "Slider12", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        MyCarPath.MaxLength = Value
        
   end,
})
local Slider4 = Tab1:CreateSlider({
   Name = "Change Length RR / MaxLength",
   Range = {-0.1, 50},
   Increment = 0.05,
   Suffix = "",
   CurrentValue = 2.2,
   Flag = "Slider13", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        MyCarPath.MaxLength = Value
        
   end,
})
local Slider5 = Tab1:CreateSlider({
   Name = "Change Length FL / MinLength",
   Range = {-0.1, 50},
   Increment = 0.05,
   Suffix = "",
   CurrentValue = 2.2,
   Flag = "Slider10", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        MyCarPath.MinLength = Value
        
   end,
})
local Slider = Tab1:CreateSlider({
   Name = "Change Length FR / MinLength",
   Range = {-0.1, 50},
   Increment = 0.05,
   Suffix = "",
   CurrentValue = 2.2,
   Flag = "Slider10", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        MyCarPath.MinLength = Value
        
   end,
})
local Slider = Tab1:CreateSlider({
   Name = "Change Length RL / MinLength",
   Range = {-0.1, 50},
   Increment = 0.05,
   Suffix = "",
   CurrentValue = 2.2,
   Flag = "Slider11", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        MyCarPath.MinLength = Value
        
   end,
})
local Slider = Tab1:CreateSlider({
   Name = "Change Length RR / MinLength",
   Range = {-0.1, 50},
   Increment = 0.05,
   Suffix = "",
   CurrentValue = 2.2,
   Flag = "Slider11", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        MyCarPath.MinLength = Value
        
   end,
})
local Tab2 = Window:CreateTab("rear and front idk", 4483362458)
local LengthFSlider = Tab2:CreateSlider({
   Name = "Change Length Front",
   Range = {-0.5, 5},
   Increment = 0.05,
   Suffix = "",
   CurrentValue = 2.2,
   Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        MyCarPath.MaxLength = Value
        MyCarPath.MaxLength = Value
        MyCarPath.MinLength = Value
        MyCarPath.MinLength = Value        
   end,
})
local LengthRSlider = Tab2:CreateSlider({
   Name = "Change Length Front",
   Range = {-0.5, 5},
   Increment = 0.05,
   Suffix = "",
   CurrentValue = 2.2,
   Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        MyCarPath.MaxLength = Value
        MyCarPath.MaxLength = Value
        MyCarPath.MinLength = Value
        MyCarPath.MinLength = Value        
   end,
})
